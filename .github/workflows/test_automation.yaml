# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build Image

on:
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [21.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}
        ports:
          - 5432:5432
    env:
      DATABASE: ${{ secrets.DATABASE }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      HOST: ${{ secrets.HOST }}
      CLOUD_DATABASE: ${{ secrets.CLOUD_DATABASE }}
      CLOUD_USERNAME: ${{ secrets.CLOUD_USERNAME }}
      CLOUD_PASSWORD: ${{ secrets.CLOUD_PASSWORD }}
      CLOUD_HOST: ${{ secrets.CLOUD_HOST }}      
      DIALECT: ${{ secrets.DIALECT }}
      DB_PORT: ${{ secrets.DB_PORT }}
      INSTANCE_TEMPLATE_UPDATE: ${{ env.INSTANCE_TEMPLATE_UPDATE }}
      PROJECT_ID: ${{ env.PROJECT_ID }}
      IMAGE_ID: ${{ env.IMAGE_ID }}
      REGION: ${{ env.REGION }}
      SERVICE_ACCOUNT: ${{ env.SERVICE_ACCOUNT }}
      LOGPATH: ${{ env.LOGPATH }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

    steps:

      - uses: actions/checkout@v3
        name: Use Node.js ${{ matrix.node-version }}
        
  #     - name: create env file
  #       run: |
  #         touch .env
  #         echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #         echo DATABASE=${{ secrets.DATABASE }} >> .env
  #         echo USERNAME=${{ secrets.USERNAME }} >> .env
  #         echo PASSWORD=${{ secrets.PASSWORD }} >> .env
  #         echo HOST=${{ secrets.HOST }} >> .env
  #         echo DIALECT=${{ secrets.DIALECT }} >> .env

      
  #     - run: pwd && ls -lart
  #     - run: cd .. && pwd && ls -lart

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'npm'

  #     - run: npm install
  #     - run: npm test
      
  #     - run: rm .env
  #     - run: zip -r "${{ github.workspace}}/webapp.zip" "./../webapp"
  #     - run: ls -lart "${{ github.workspace}}"
           
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: webapp
  #         path: webapp.zip
          

  # packer:
  #   permissions:
  #    contents: 'read'
  #    id-token: 'write'
  #   needs: test
  #   runs-on: ubuntu-latest
  
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - id: 'auth'
  #       name: 'Authenticate to Google Cloud'
  #       uses: 'google-github-actions/auth@v2'
  #       with:
  #         credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

  #     # - run: cp "${{ github.workspace}}/webapp.zip" .      
      
  #     - name: Download a single artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: webapp
  #         path: ..
          
  #     - name: Setup packer
  #       uses: hashicorp/setup-packer@main
  #       with:
  #         version: '1.8.3' 

  #     - run: pwd && ls -lart
  #     - run: cd .. && pwd && ls -lart

  #     - name: Initialize packer
  #       working-directory: packer
  #       run: packer init .
        
  #     - name: Format packer
  #       working-directory: packer
  #       run: packer fmt . 
        
  #     - name: Validate packer
  #       working-directory: packer
  #       run: packer validate . 
 
  #     - name: Run packer Build
  #       working-directory: packer
  #       run: packer build .

      - name: Create updated instance template
        run: |
          gcloud beta compute instance-templates create ${{env.INSTANCE_TEMPLATE_UPDATE}} \
            --project=${{env.PROJECT_ID}} \
            --machine-type=e2-medium \
            --instance-template-region=${{env.REGION}} \
            --network-interface=network-tier=STANDARD,subnet=webapp-subnet \
            --metadata=startup-script="#!/bin/bash\n\nset -e\nif [ -f \"/opt/webapp/.env\" ]; then\n  echo \"Env file exists:\"\n  sudo cat \"/opt/webapp/.env\"\nelse\n  # setup env file\n  sudo echo \"HOST=${{secrets.CLOUD_HOST}}\" > /opt/webapp/.env\n  sudo echo \"DATABASE=${{secrets.CLOUD_DATABASE}}\" >> /opt/webapp/.env\n  sudo echo \"USERNAME=${{secrets.CLOUD_USERNAME}}\" >> /opt/webapp/.env\n  sudo echo \"PASSWORD=${{secrets.CLOUD_PASSWORD}}\" >> /opt/webapp/.env\n  sudo echo \"DIALECT=${{secrets.PASSWORD}}\" >> /opt/webapp/.env\n  sudo echo \"DB_PORT=${{secrets.DB_PORT}}\" >> /opt/webapp/.env\n  sudo echo \"LOGPATH=${{env.LOGPATH}}\" >> /opt/webapp/.env\n  echo \"Env file generated\"\nfi\n\necho \"Restart ops agent\"\nsudo systemctl restart google-cloud-ops-agent\nsudo systemctl status google-cloud-ops-agent --no-pager\n\necho \"Setting up webapp service\"\nsudo cat /opt/webapp/packer/setup_service.sh\nsudo /opt/webapp/packer/setup_service.sh" \
            --service-account ${{env.SERVICE_ACCOUNT}}@${{env.PROJECT_ID}}.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.read \
            --region=${{env.REGION}} \
            --tags=http-server \
            --create-disk=auto-delete=yes,boot=yes,device-name=webapp,image=projects/${{env.PROJECT_ID}}/global/images/${{env.IMAGE_ID}},mode=rw,size=100,type=pd-balanced          
        # --maintenance-policy=MIGRATE --provisioning-model=STANDARD \
        # --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any

      - name: Set updated instance template to instance group
        run: gcloud compute instance-groups managed set-instance-template \
          mig-mgr --template=${{env.INSTANCE_TEMPLATE_UPDATE}} 

      - name: Issue rolling update on instance group
        run: gcloud compute instance-groups managed rolling-action start-update mig-mgr \
          --version=template=${{env.INSTANCE_TEMPLATE_UPDATE}}  --region=${{env.REGION}}
      
      - name: Monitor updates
        run: gcloud compute instance-groups managed wait-until mig-mgr \
          --version-target-reached --region=${{env.REGION}}